mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
## H: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt_relative_filt, "Genus", NArm = FALSE)
# Convert OTU counts to relative abundance
mpt_genus_RA <- transform_sample_counts(mpt_genus, fun=function(x) x/sum(x))
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus_RA)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus)$`Horizon`, control = how(nperm = 999))
library(tidyverse)
library(dplyr)
library(phyloseq)
library(ape)
library(vegan)
library(indicspecies)
library(microbiome)
## G: Set a prevalence threshold and abundance threshold
# Abundance = 0.001; I want check whether the ASV is present or not
abundance_threshold <- 0.001
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0.1
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
## H: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt_relative_filt, "Genus", NArm = FALSE)
# Convert OTU counts to relative abundance
mpt_genus_RA <- transform_sample_counts(mpt_genus, fun=function(x) x/sum(x))
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus_RA)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
View(isa_sum)
View(isa_sum)
## H: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt_relative_filt, "Genus", NArm = FALSE)
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
View(t(otu_table(mpt_genus)))
View(t(otu_table(mpt_genus)))
## G: Set a prevalence threshold and abundance threshold
# Abundance = 0.0001; I want check whether the ASV is present or not
abundance_threshold <- 0.0001
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0.1
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
## H: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt_relative_filt, "Genus", NArm = FALSE)
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
View(mpt_genus)
View(mpt_genus)
## G: Set a prevalence threshold and abundance threshold
# Abundance = 0.0001; I want check whether the ASV is present or not
abundance_threshold <- 0
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
## H: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt_relative_filt, "Genus", NArm = FALSE)
## H: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt, "Genus", NArm = FALSE)
mpt_relative <- microbiome::transform(mpt_genus, "compositional")
class(mpt_relative)
## h: Set a prevalence threshold and abundance threshold
# Abundance = 0.0001; I want check whether the ASV is present or not
abundance_threshold <- 0
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
View(isa_sum)
## h: Set a prevalence threshold and abundance threshold
# Abundance = 0.0001; I want check whether the ASV is present or not
abundance_threshold <- 0.001
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0.05
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0.1
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
taxtable <- tax_table(mpt) %>% as.data.frame() %>% rownames_to_column(var="ASV")
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001)
View(isa_sum)
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.07)
View(isa_sum)
View(isa_sum)
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.7)
View(isa_sum)
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.8)
View(isa_sum)
### Step 1:Load in the 'tidyverse', 'dplyr', 'phyloseq', 'ape', 'vegan' and 'indicspecies' package
library(tidyverse)
library(dplyr)
library(phyloseq)
library(ape)
library(vegan)
library(indicspecies)
library(microbiome)
### Step 2: Load in the soil metadata, OTU table, taxonomy file, and phylogenetic tree
# soil metadata
metaFP <- "soil_metadata.tsv"
meta <- read.delim(file=metaFP, sep = "\t")
# OTU table
otuFP <- "mpt_export/filtered_table_export/filtered-feature-table.txt"
otu <- read.delim(file=otuFP, sep ="\t", skip=1)
# taxonomy file
taxFP <- "mpt_export/taxonomy_export/taxonomy.tsv"
tax <- read.delim(file=taxFP, sep = "\t")
# phylogenetic tree
phyloFP <- "mpt_export/rooted_tree_export/tree.nwk"
phylo <- read.tree(file=phyloFP)
### Step 3: Adjust files to be read into a phyloseq object. Make the phyloseq object.
## A: Format OTU table as a matrix with rownames and colnames as OTUs and sampleIDs, respectively
# Save everything except first column (X.OTU.ID) into a matrix
otu_mat <- as.matrix(otu[,-1])
# Make first column (X.OTU.ID) the rownames of the new matrix
rownames(otu_mat) <- otu$`X.OTU.ID`
# Use the "otu_table" function to make an OTU table
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)
class(OTU)
## B: Format sample metadata
# Save everything except X.SampleID as new data frame
samp_df <- as.data.frame(meta[,-1])
# Make X.SampleID the rownames
rownames(samp_df)<- meta$'X.SampleID'
# Make phyloseq sample data with sample_data() function
SAMP <- sample_data(samp_df)
class(SAMP)
## C: Formatting taxonomy
# Convert taxon strings to a table with separate taxa rank columns
tax_mat <- tax %>% select(-Confidence)%>%
separate(col=Taxon, sep="; "
, into = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
as.matrix() # Saving as a matrix
# Save everything except feature IDs
tax_mat <- tax_mat[,-1]
# Make sampleids the rownames
rownames(tax_mat) <- tax$`Feature.ID`
# Make taxa table
TAX <- tax_table(tax_mat)
class(TAX)
## D: Create phyloseq object with adjusted files. (The phylogenetic tree doesn't need to be adjusted.)
# Merge all into a phyloseq object
mpt <- phyloseq(OTU, SAMP, TAX, phylo)
## E: Looking at phyloseq object
# View components of phyloseq object with the following commands
otu_table(mpt)
sample_data(mpt)
tax_table(mpt)
phy_tree(mpt)
## F: Convert phyloseq table to relative abundance
# Group based on genus level
mpt_genus <- tax_glom(mpt, "Genus", NArm = FALSE)
## G: Covert reads to relative abundance data
mpt_relative <- microbiome::transform(mpt_genus, "compositional")
class(mpt_relative)
## h: Set a prevalence threshold and abundance threshold
# Abundance = 0.0001; I want check whether the ASV is present or not
abundance_threshold <- 0.001
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0.1
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
### Step 4: Perform Indicator Taxa Analysis
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_genus_RA)$`Horizon`, control = how(nperm = 999))
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_relative_filt)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
taxtable <- tax_table(mpt) %>% as.data.frame() %>% rownames_to_column(var="ASV")
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.8)
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_relative_filt)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
taxtable <- tax_table(mpt_relative ) %>% as.data.frame() %>% rownames_to_column(var="ASV")
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.8)
view isa_sum
View isa_sum
View(isa_sum)
indic_plot <- ggplot(data = isa_sum,
mapping = aes(x = horizon, y = Genus))
View(indic_plot)
indic_plot <- ggplot(data = isa_sum) +
geom_point(mapping = aes(x = horizon, y = Genus))
View(indic_plot)
indic_plot <- ggplot(data = isa_sum) +
geom_point(mapping = aes(x = s.A horizon, y = Genus))
indic_plot <- ggplot(data = isa_sum) +
geom_point(mapping = aes(x = "s.A horizon", y = "Genus"))
View(indic_plot)
View(indic_plot)
View(indic_plot)
ggplot(data = isa_sum, aes(x = "s.A horizon", y = "Genus")) +
geom_point()
ggplot(data = isa_sum, aes(x = s.A horizon, y = Genus)) +
ggplot(data = isa_sum, aes(x = horizon, y = Genus)) +
geom_point()
rlang::last_trace()
ggplot(data = isa_sum, aes(x = ASV, y = Genus)) +
geom_point()
ggplot(data = isa_sum, aes(x = , horizon(s.A_horizon, s.O_horizon), y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = horizon(s.A_horizon, s.O_horizon), y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = s.A_horizon, y = Genus)) + geom_point()
View(isa_sum)
View(isa_sum)
View(isa_sum)
isa_sum
ggplot(data = isa_sum, aes(x = s.A horizon, y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = horizon, y = Genus)) + geom_point()
rlang::last_trace()
View(SAMP)
ggplot(data = isa_sum, aes(x = Horizon, y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = `Horizon`, y = Genus)) + geom_point()
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_relative_filt)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
taxtable <- tax_table(mpt_relative ) %>% as.data.frame() %>% rownames_to_column(var="ASV")
View(taxtable)
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.8)
View(isa_sum)
cluster = sample_data(mpt_relative_filt)$`Horizon`
ggplot(data = isa_sum, aes(x = `s.A horizon`, y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = `s.A horizon`, x = `s.O horizon` y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = `s.A horizon`, x = `s.O horizon`, y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(y = Genus)) +
geom_point(aes(x = `s.A horizon`)) +
geom_point(aes(x = `s.O horizon`)) +
labs(y = "Genus")
ggplot(data = isa_sum, aes(y = Genus)) +
geom_point(aes(x = `s.A horizon`)) +
geom_point(aes(x = `s.O horizon`)) +
labs(y = "Genus") +
facet_grid(rows = vars(Genus), scales = "free_x", switch = "x") +
theme(strip.text.y = element_text(angle = 0))
ggplot(data = isa_sum, aes(x = `s.A horizon`, y = Genus)) + geom_point() +
scale_x_continuous(sec.axis = sec_axis(~ ., name = s.O horizon))
ggplot(data = isa_sum, aes(x = `s.A horizon`, y = Genus)) + geom_point() +
scale_x_continuous(sec.axis = sec_axis(~ ., name = "s.O horizon"))
ggplot(isa_sum, aes(y = Genus)) +
geom_point(aes(x = `s.A horizon`)) +
geom_point(aes(x = `s.O horizon`)) +
labs(title = "Scatter Plots of s.A horizon and s.O horizon vs Genus",
y = "Genus") +
facet_grid(. ~ Genus, scales = "free_x", space = "free_x") +
theme(strip.text.y = element_text(angle = 0))
ggplot(data = isa_sum, aes(x = `s.A horizon`, y = Genus)) + geom_point() +
ggplot(data = isa_sum, aes(x = `s.O horizon`, y = Genus))
ggplot(data = isa_sum, aes(x = `s.A horizon`, y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = `s.O horizon`, y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) + geom_point()
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point() +
xlab("Horizon")+
ylab("Genus")
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point() +
ax.set_xticklabels(('A Horizon', 'O Horizon'))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point() +
ax.set_xticklabels(('A Horizon', 'O Horizon'))+
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point() +
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=x("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point() +
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
indic_plot <- ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat), legend("topright", c=("0.85","0.90","0.95"),
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_size_continuous(
breaks = c(0, 0.85, 0.90, 0.95),
labels = c("0", "0.85", "0.90", "0.95"),
range = c(0, 1, 2, 3),
limits = c(0, 0.95),
guide = guide_legend(
title = "Mean % Ab.",
title.position = "topright",
override.aes = list(
color = c("black", "red", "blue", "green"),
shape = c(NA, 1, 2, 3)
)
)
) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_size_continuous(
breaks = c(0.85, 0.90, 0.95),
labels = c("0.85", "0.90", "0.95"),
range = c(1, 2, 3),
limits = c(0.85, 0.95),
guide = guide_legend(
title = "Mean % Ab.",
title.position = "topright",
override.aes = list(
color = c("red", "blue", "green"),
shape = c(1, 2, 3)
)
)
) +
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_fill_discrete(name = "Mean % Ab.")
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat) +
scale_fill_discrete(name = "Mean % Ab."))
xlab("Horizon")+
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat) +
scale_fill_discrete(name = "Mean % Ab.")) +
xlab("Horizon") +
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat),
scale_fill_discrete(name = "Mean % Ab.")) +
xlab("Horizon") +
ylab("Genus") +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
labs(x = "Horizon", y = "Genus")
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon"))
labs(x = "Horizon", y = "Genus")
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus")
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus") +
guides(size = guide_legend(title = "Mean % Ab."))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus") +
guides(size = guide_legend(title = "Mean % Ab."))
scale_colour_manual(values = c("0.85" = "green",
"0.90" = "red",
"0.95" = "blue"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus") +
guides(size = guide_legend(title = "Mean % Ab.")) +
scale_colour_manual(values = c("0.85" = "green",
"0.90" = "red",
"0.95" = "blue"))
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
geom_point(aes(colour = c(0.85 = "blue")))+
ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
geom_point(aes(colour = "blue"))+
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus") +
guides(size = guide_legend(title = "Mean % Ab.")) +
## : ISA Visualization
# Create scatter plot with dot size to visualize ISA Sum
indic_plot <- ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus") +
guides(size = guide_legend(title = "Mean % Ab."))
indic_plot <- ggplot(data = isa_sum, aes(x = interaction(`s.A horizon`, `s.O horizon`), y = Genus)) +
geom_point(aes(size = stat)) +
scale_x_discrete(breaks=c("1.0", "0.1"),
labels=c("A Horizon", "O Horizon")) +
labs(x = "Horizon", y = "Genus") +
guides(size = guide_legend(title = "Mean % Ab."))
# Save the plot as an image.
ggsave("Indicator Species Analysis Plot.png", indic_plot)
