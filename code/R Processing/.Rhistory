ungroup() %>%
arrange(Horizon) %>%
mutate(Genus = factor(Genus, levels = .$Genus))
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus) %>%
ungroup() %>%
arrange(Horizon) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
ggplot(data = mean_abund, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus)
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus)
indic_plot <- ggplot(data = mean_abund, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus) %>%
ungroup() %>%
arrange(Horizon) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
ggplot(data = mean_abund, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
ungroup() %>%
filter(Genus %in% isa_sum$Genus) %>%
arrange(Horizon) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
ggplot(data = mean_abund, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus) %>%
ungroup(Genus, Horizon) %>%
arrange(Horizon) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
ggplot(data = mean_abund, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
View(mean_abund)
View(isa_sum)
isa_RA <- merge(isa_sum, mean_abund)
View(isa_RA)
isa_RA <- merge(isa_sum, mean_abund) %>%
ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA)
isa_RA <- merge(isa_sum, mean_abund)
isa_sum$isa_RA <-  ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA)
isa_RA <- merge(isa_sum, mean_abund) %>%
Indicator$isa_RA <-  ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA)
isa_RA <- merge(isa_sum, mean_abund) %>%
Indicator$isa_RA <-  ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA)
isa_RA <- merge(isa_sum, mean_abund)
Indicator$isa_RA <-  ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA)
isa_RA <- Indicator$isa_RA <-  ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA)
indicator$isa_RA <- c(ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA))
mean_abund$indicator <- c(ifelse(isa_sum$s.A.horizon == 1 | isa_sum$s.O.horizon == 1, 1, NA))
# Create new column with isa_sum results for the visualization
mean_abund$indicator <- apply(isa_sum[,c(`s.A horizon`, `s.O horizon`)],
1,
function(row) {
ifelse(row ==1, names(row) [row ==1], NA)
})
mean_abund$indicator <- apply(isa_sum[,c("s.A horizon", "s.O horizon")],
1,
function(row) {
ifelse(row ==1, names(row) [row ==1], NA)
})
isa_RA <-  merge(mean_abund, isa_sum,by=c("s.A horizon","s.O horizon"))
isa_RA <-  merge(mean_abund, isa_sum)
View(isa_RA)
isa_RA <-  merge(mean_abund, isa_sum) %>%
subset(isa_RA, select = -c(ASV) )
isa_RA <-  merge(mean_abund, isa_sum) %>%
subset(isa_RA, select = -c(4))
# Merging data frames
merged_data <-  merge(mean_abund, isa_sum)
# Subsetting the merged data frame
isa_RA <- subset(merged_data, select = -c(4))
View(isa_RA)
isa_RA <- subset(merged_data, select = -c(4,7:))
isa_RA <- subset(merged_data, select = -c(4,7:16))
View(isa_RA)
View(mpt)
View(meta)
isa_RA$indicator
isa_RA$indicator <- c("s.A")
View(isa_RA)
isa_RA$indicator <- c(if s.A.horizon == 1
isa_RA$indicator <- c(if `s.A horizon` == 1
isa_RA$indicator <- c(if "s.A horizon" == 1
# Create new column that denotes indicator type
isa_RA$indicator <- ifelse(isa_RA$"s.A horizon" == 1, "s.A horizon",
ifelse(isa_RA$"s.O horizon" == 1, "s.O horizon", NA))
View(isa_RA)
isa_RA <- arrange(Horizon) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
isa_RA <- subset(merged_data, select = -c(4,7:16))
# Create new column that denotes indicator type
isa_RA$Indicator <- ifelse(isa_RA$"s.A horizon" == 1, "s.A horizon",
ifelse(isa_RA$"s.O horizon" == 1, "s.O horizon", NA))
# Arrange the data
isa_RA <- arrange(Indicator) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
# Subsetting the merged data frame
isa_RA <- subset(merged_data, select = -c(4,7:16))
# Create new column that denotes indicator type
isa_RA$Indicator <- ifelse(isa_RA$"s.A horizon" == 1, "s.A horizon",
ifelse(isa_RA$"s.O horizon" == 1, "s.O horizon", NA))
# Arrange the data
isa_RA <- arrange(Indicator) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
View(isa_RA)
isa_RA <- arrange(Genus)
View(mean_abund)
isa_RA <- arrange(isa_RA, Indicator)
View(isa_RA)
isa_RA <- arrange(isa_RA, Indicator) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
View(isa_RA)
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(labels = c('A Horizon', 'O Horizon'),
values = factor(c('A horizon', 'O horizon')))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab."))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("yellow","purple"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#AFA931","#7C2171"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#AFA931","#7C215A"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#D58A00","#7C215A"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#FFD78D","#E08DFF"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#D58A00","#7C215A"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#D58A00","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#D5BE8E","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#AD8B45","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
# Save the plot as an image.
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#FFC245","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#DD9503","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
# Save the plot as an image.
ggsave("Indicator Species Analysis Plot.png", indic_plot)
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#DDCC77","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#FFC20A","#9C75AA"),
labels = c('A Horizon', 'O Horizon'))
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = Abundance, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Relative Ab.")) +
scale_color_manual(values = c("#FFC20A","#0C7BDC"),
labels = c('A Horizon', 'O Horizon'))
# Save the plot as an image.
ggsave("Indicator Species Analysis Plot.png
labels = c('A Horizon', 'O Horizon'))
# Save the plot as an image.
ggsave("Indicator Species Analysis Plot.png", indic_plot)
the plot as an image.
# Save the plot as an image.
ggsave("Indicator Species Analysis Plot.png", indic_plot)
View(isa_RA)
# Calculate mean % abundance
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus) %>%
ungroup(Genus, Horizon) %>%
# Merging data frames
merged_data <-  merge(mean_abund, isa_sum)
isa_RA$Mean.Abundance <- isa_RA$Abundance * 100
View(isa_RA)
isa_RA$Mean Abundance <- isa_RA$Abundance * 100
isa_RA$Mean Abundance <- isa_RA$Abundance * 100
isa_RA$`Mean Abundance` <- isa_RA$Abundance * 100
View(isa_RA)
ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = `Mean Abundance`, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Mean % Ab.")) +
scale_color_manual(values = c("#FFC20A","#0C7BDC"),
labels = c('A Horizon', 'O Horizon'))
View(isa_sum)
View(isa_sum)
View(mean_abund)
merged_data <-  merge(mean_abund, isa_sum)
View(merged_data)
View(mean_abund)
# Merging data frames
merged_data <-  merge(mean_abund, isa_sum)
# Subsetting the merged data frame
isa_RA <- subset(merged_data, select = -c(4,7:16))
# Create new column that denotes indicator type
isa_RA$Indicator <- ifelse(isa_RA$"s.A horizon" == 1, "s.A horizon",
ifelse(isa_RA$"s.O horizon" == 1, "s.O horizon", NA))
# Create new column that is the mean % abundance
isa_RA$`Mean Abundance` <- isa_RA$Abundance * 100
# Arrange the data
isa_RA <- arrange(isa_RA, Indicator) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
### Aim 2: What species indicators do we see arise in A vs O horizons? ###
# Install the indicspecies package
#install.packages("indicspecies")
### Step 1:Load in the 'tidyverse', 'dplyr', 'phyloseq', 'ape', 'vegan', 'indicspecies' and 'microbiome' package
library(tidyverse)
library(dplyr)
library(phyloseq)
library(ape)
library(vegan)
library(indicspecies)
library(microbiome)
### Step 2: Load in the soil metadata, OTU table, taxonomy file, and phylogenetic tree
# soil metadata
metaFP <- "soil_metadata.tsv"
meta <- read.delim(file=metaFP, sep = "\t")
# OTU table
otuFP <- "mpt_export/filtered_table_export/filtered-feature-table.txt"
otu <- read.delim(file=otuFP, sep ="\t", skip=1)
# taxonomy file
taxFP <- "mpt_export/taxonomy_export/taxonomy.tsv"
tax <- read.delim(file=taxFP, sep = "\t")
# phylogenetic tree
phyloFP <- "mpt_export/rooted_tree_export/tree.nwk"
phylo <- read.tree(file=phyloFP)
### Step 3: Adjust files to be read into a phyloseq object. Make the phyloseq object.
## A: Format OTU table as a matrix with rownames and colnames as OTUs and sampleIDs, respectively
# Save everything except first column (X.OTU.ID) into a matrix
otu_mat <- as.matrix(otu[,-1])
# Make first column (X.OTU.ID) the rownames of the new matrix
rownames(otu_mat) <- otu$`X.OTU.ID`
# Use the "otu_table" function to make an OTU table
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)
class(OTU)
## B: Format sample metadata
# Save everything except X.SampleID as new data frame
samp_df <- as.data.frame(meta[,-1])
# Make X.SampleID the rownames
rownames(samp_df)<- meta$'X.SampleID'
# Make phyloseq sample data with sample_data() function
SAMP <- sample_data(samp_df)
class(SAMP)
## C: Formatting taxonomy
# Convert taxon strings to a table with separate taxa rank columns
tax_mat <- tax %>% select(-Confidence)%>%
separate(col=Taxon, sep="; "
, into = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
as.matrix() # Saving as a matrix
# Save everything except feature IDs
tax_mat <- tax_mat[,-1]
# Make sampleids the rownames
rownames(tax_mat) <- tax$`Feature.ID`
# Make taxa table
TAX <- tax_table(tax_mat)
class(TAX)
## D: Create phyloseq object with adjusted files. (The phylogenetic tree doesn't need to be adjusted.)
# Merge all into a phyloseq object
mpt <- phyloseq(OTU, SAMP, TAX, phylo)
## E: Looking at phyloseq object
# View components of phyloseq object with the following commands
otu_table(mpt)
sample_data(mpt)
tax_table(mpt)
phy_tree(mpt)
## F: Group phyloseq object based on genus level
mpt_genus <- tax_glom(mpt, "Genus", NArm = FALSE)
## G: Covert reads to relative abundance data
mpt_relative <- microbiome::transform(mpt_genus, "compositional")
class(mpt_relative)
## H: Set a prevalence threshold and abundance threshold
# Abundance = 0.0001; I want check whether the ASV is present or not
abundance_threshold <- 0.001
# Prevalence = 0.1; I want the ASV present in 10% of the samples
prevalence_threshold <- 0.1
# List of taxa that pass the abundance threshold
abundant_taxa_names = prune_taxa((taxa_sums(mpt_relative)/nsamples(mpt_relative))>abundance_threshold, mpt_relative) %>% taxa_names
# List of taxa that pass the prevalence threshold
prevalent_taxa_rows = apply(mpt_relative@otu_table@.Data, 1, function(x) (sum(x != 0, na.rm = TRUE)/length(x[!is.na(x)]))>prevalence_threshold)
# Select phyloseq rows where value==TRUE
prevalent_taxa_names = rownames(mpt_relative@tax_table@.Data)[prevalent_taxa_rows]
#filter phyloseq object
mpt_relative_filt = prune_taxa(intersect(abundant_taxa_names,prevalent_taxa_names),mpt_relative)
### Step 4: Perform Indicator Species Analysis
# Flip OTU row and column names & calculate indicator values for all ASV's 999 times as per the permutation hypothesis test
isa_mpt <- multipatt(t(otu_table(mpt_genus)), cluster = sample_data(mpt_relative_filt)$`Horizon`, control = how(nperm = 999))
summary(isa_mpt)
taxtable <- tax_table(mpt_relative) %>% as.data.frame() %>% rownames_to_column(var="ASV")
# Summary table of ISA data
isa_sum <- isa_mpt$sign %>%
rownames_to_column(var="ASV") %>%
left_join(taxtable) %>%
filter(p.value==0.001, stat>0.8)
# Calculate mean % abundance
mean_abund <- mpt_relative %>%
microbiome::transform('compositional') %>%
tax_glom('Genus') %>%
psmelt() %>%
group_by(Genus, Horizon) %>%
summarize(Abundance=mean(Abundance)) %>%
filter(Genus %in% isa_sum$Genus) %>%
ungroup(Genus, Horizon)
# Merging data frames
merged_data <-  merge(mean_abund, isa_sum)
# Subsetting the merged data frame
isa_RA <- subset(merged_data, select = -c(4,7:16))
# Create new column that denotes indicator type
isa_RA$Indicator <- ifelse(isa_RA$"s.A horizon" == 1, "s.A horizon",
ifelse(isa_RA$"s.O horizon" == 1, "s.O horizon", NA))
# Create new column that is the mean % abundance
isa_RA$`Mean Abundance` <- isa_RA$Abundance * 100
# Arrange the data
isa_RA <- arrange(isa_RA, Indicator) %>%
mutate(Genus = factor(Genus, levels = .$Genus %>% unique()))
### Step 5: Visualize Data
## : ISA Visualization
# Create scatter plot with dot size to visualize ISA Sum
indic_plot <- ggplot(data = isa_RA, aes(x = Horizon, y = Genus)) +
geom_point(aes(size = `Mean Abundance`, colour = Indicator)) +
scale_x_discrete(breaks=c("A horizon", "O horizon"),
labels=c("A Horizon", "O Horizon")) +
labs(y = "Genus") +
xlab(NULL) +
guides(size = guide_legend(title = "Mean % Ab.")) +
scale_color_manual(values = c("#FFC20A","#0C7BDC"),
labels = c('A Horizon', 'O Horizon'))
# Save the plot as an image.
ggsave("Indicator Species Analysis Plot.png", indic_plot)
View(isa_RA)
